// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package purchasepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PurchaseServiceClient is the client API for PurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseServiceClient interface {
	CreatePurchase(ctx context.Context, in *CreatePurchaseRequest, opts ...grpc.CallOption) (*CreatePurchaseResponse, error)
	ListPurchase(ctx context.Context, in *ListPurchaseRequest, opts ...grpc.CallOption) (*ListPurchaseResponse, error)
	GetPurchase(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error)
	UpdatePurchase(ctx context.Context, in *UpdatePurchaseRequest, opts ...grpc.CallOption) (*UpdatePurchaseResponse, error)
}

type purchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseServiceClient(cc grpc.ClientConnInterface) PurchaseServiceClient {
	return &purchaseServiceClient{cc}
}

func (c *purchaseServiceClient) CreatePurchase(ctx context.Context, in *CreatePurchaseRequest, opts ...grpc.CallOption) (*CreatePurchaseResponse, error) {
	out := new(CreatePurchaseResponse)
	err := c.cc.Invoke(ctx, "/purchasepb.PurchaseService/CreatePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) ListPurchase(ctx context.Context, in *ListPurchaseRequest, opts ...grpc.CallOption) (*ListPurchaseResponse, error) {
	out := new(ListPurchaseResponse)
	err := c.cc.Invoke(ctx, "/purchasepb.PurchaseService/ListPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) GetPurchase(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error) {
	out := new(GetPurchaseResponse)
	err := c.cc.Invoke(ctx, "/purchasepb.PurchaseService/GetPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) UpdatePurchase(ctx context.Context, in *UpdatePurchaseRequest, opts ...grpc.CallOption) (*UpdatePurchaseResponse, error) {
	out := new(UpdatePurchaseResponse)
	err := c.cc.Invoke(ctx, "/purchasepb.PurchaseService/UpdatePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServiceServer is the server API for PurchaseService service.
// All implementations must embed UnimplementedPurchaseServiceServer
// for forward compatibility
type PurchaseServiceServer interface {
	CreatePurchase(context.Context, *CreatePurchaseRequest) (*CreatePurchaseResponse, error)
	ListPurchase(context.Context, *ListPurchaseRequest) (*ListPurchaseResponse, error)
	GetPurchase(context.Context, *GetPurchaseRequest) (*GetPurchaseResponse, error)
	UpdatePurchase(context.Context, *UpdatePurchaseRequest) (*UpdatePurchaseResponse, error)
	mustEmbedUnimplementedPurchaseServiceServer()
}

// UnimplementedPurchaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServiceServer struct {
}

func (UnimplementedPurchaseServiceServer) CreatePurchase(context.Context, *CreatePurchaseRequest) (*CreatePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchase not implemented")
}
func (UnimplementedPurchaseServiceServer) ListPurchase(context.Context, *ListPurchaseRequest) (*ListPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPurchase not implemented")
}
func (UnimplementedPurchaseServiceServer) GetPurchase(context.Context, *GetPurchaseRequest) (*GetPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchase not implemented")
}
func (UnimplementedPurchaseServiceServer) UpdatePurchase(context.Context, *UpdatePurchaseRequest) (*UpdatePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchase not implemented")
}
func (UnimplementedPurchaseServiceServer) mustEmbedUnimplementedPurchaseServiceServer() {}

// UnsafePurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServiceServer will
// result in compilation errors.
type UnsafePurchaseServiceServer interface {
	mustEmbedUnimplementedPurchaseServiceServer()
}

func RegisterPurchaseServiceServer(s grpc.ServiceRegistrar, srv PurchaseServiceServer) {
	s.RegisterService(&PurchaseService_ServiceDesc, srv)
}

func _PurchaseService_CreatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).CreatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchasepb.PurchaseService/CreatePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).CreatePurchase(ctx, req.(*CreatePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_ListPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).ListPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchasepb.PurchaseService/ListPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).ListPurchase(ctx, req.(*ListPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_GetPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).GetPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchasepb.PurchaseService/GetPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).GetPurchase(ctx, req.(*GetPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_UpdatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).UpdatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/purchasepb.PurchaseService/UpdatePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).UpdatePurchase(ctx, req.(*UpdatePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseService_ServiceDesc is the grpc.ServiceDesc for PurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "purchasepb.PurchaseService",
	HandlerType: (*PurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePurchase",
			Handler:    _PurchaseService_CreatePurchase_Handler,
		},
		{
			MethodName: "ListPurchase",
			Handler:    _PurchaseService_ListPurchase_Handler,
		},
		{
			MethodName: "GetPurchase",
			Handler:    _PurchaseService_GetPurchase_Handler,
		},
		{
			MethodName: "UpdatePurchase",
			Handler:    _PurchaseService_UpdatePurchase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codemen.org/inventory/gunk/v1/purchase/all.proto",
}
